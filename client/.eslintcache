[{"/app/client/src/components/Search.js":"1","/app/client/src/reportWebVitals.js":"2","/app/client/src/components/ByLables.js":"3","/app/client/src/api/index.js":"4","/app/client/src/components/Pastes.js":"5","/app/client/src/index.js":"6","/app/client/src/components/Notifications.js":"7","/app/client/src/components/Tags.js":"8","/app/client/src/components/ByName.js":"9","/app/client/src/components/Lables.js":"10"},{"size":12648,"mtime":1607195823647,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1606673647310,"results":"13","hashOfConfig":"12"},{"size":1020,"mtime":1607162688794,"results":"14","hashOfConfig":"12"},{"size":542,"mtime":1607176287904,"results":"15","hashOfConfig":"12"},{"size":3533,"mtime":1607126634395,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1606910761884,"results":"17","hashOfConfig":"12"},{"size":2776,"mtime":1607238213875,"results":"18","hashOfConfig":"12"},{"size":577,"mtime":1606910749768,"results":"19","hashOfConfig":"12"},{"size":1016,"mtime":1607159993531,"results":"20","hashOfConfig":"12"},{"size":1969,"mtime":1607193911900,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"jg9a1a",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/client/src/components/Search.js",["45","46"],"import React, { useEffect, useState } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Badge from \"@material-ui/core/Badge\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChooseLabels from \"./Lables\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Link from \"@material-ui/core/Link\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport api from \"../api/index\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport { Link as RLink } from \"react-router-dom\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport Divider from \"@material-ui/core/Divider\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    width: \"10px\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  appBar: {\n    position: \"fixed\",\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  toolbar: {\n    minHeight: 0,\n    alignItems: \"flex-start\",\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n  },\n  buttons2: {\n    width: \"300px\",\n  },\n  buttons1: {\n    marginLeft: \"25rem\",\n    width: \"300px\",\n    alignSelf: \"flex-end\",\n  },\n  button: {\n    margin: \"2px\",\n  },\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Search = ({\n  setAllNotitfications,\n  searchText,\n  handleChange,\n  pastes,\n  setPastes,\n  allNotitfications,\n  keyword1,\n  options,\n  setOptions,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [newKeyWord, setNewKeyword] = React.useState(\"\");\n  const [lables, setLables] = useState([]);\n  const [removeOption, setRemoveOption] = useState(null);\n\n  const getKeyWord = async () => {\n    try {\n      const { data } = await api.getPastes(\"/pastes/keyword\");\n      const obj = data.map((label) => {\n        return { value: label.name, label: label.name };\n      });\n      obj.push({ value: \"All\", label: \"All\" });\n      setOptions(obj);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getKeyWord();\n  }, []);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClickOpen = () => {\n    setModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  const handleAddKeyword = async () => {\n    try {\n      setModalOpen(false);\n      await api.create(\"/pastes/keyword\", { name: newKeyWord });\n      setNewKeyword(\"\");\n      getKeyWord();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  const handleUpdate = async (id, type) => {\n    try {\n      if (type === \"keyword\") {\n        await api.update(\"/pastes\", { _id: id });\n        const filtered = allNotitfications.filter((not) => {\n          return not._id !== id;\n        });\n        setAllNotitfications(filtered);\n      } else {\n        await api.update(\"/logs\", { _id: id });\n      }\n      const filtered = allNotitfications.filter((not) => {\n        return not._id !== id;\n      });\n      setAllNotitfications(filtered);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleRemove = async () => {\n    try {\n      console.log(removeOption);\n      await api.update(\"/pastes/keyword\", { name: removeOption });\n      getKeyWord();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className={classes.grow}>\n      <AppBar size=\"small\" className={classes.appBar} id=\"wrapper\">\n        <Toolbar className={classes.toolbar}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            DarkNet\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              size=\"small\"\n              id=\"searchInput\"\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              value={searchText}\n              onChange={(e) => handleChange(e)}\n            />\n          </div>\n\n          <div id=\"buttons\" className={classes.buttons2}>\n            <ChooseLabels\n              lables={lables}\n              setLables={setLables}\n              options={options}\n              setOptions={setOptions}\n              pastes={pastes}\n              setPastes={setPastes}\n            />\n          </div>\n          <div>\n            <Dialog\n              open={modalOpen}\n              onClose={handleModalClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">Manage keywords</DialogTitle>\n              <DialogContent>\n                <DialogContentText>add a new keyword</DialogContentText>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  label=\"new keyword\"\n                  type=\"text\"\n                  fullWidth\n                  onChange={(e) => setNewKeyword(e.target.value)}\n                />\n                <FormControl>\n                  <InputLabel id=\"demo-simple-select-helper-label\">\n                    Remove\n                  </InputLabel>\n                  <Select\n                    InputLabelProps={{ shrink: true }}\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={removeOption}\n                    onChange={(e) => setRemoveOption(e.target.value)}\n                  >\n                    {options.map(\n                      (option) =>\n                        option.value !== \"All\" && (\n                          <MenuItem value={option.value}>\n                            {option.value}\n                          </MenuItem>\n                        )\n                    )}\n                  </Select>\n                  <Button color=\"secondary\" onClick={handleRemove}>\n                    remove\n                  </Button>\n                </FormControl>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleModalClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={handleAddKeyword} color=\"primary\">\n                  Add\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n\n          <div id=\"buttons\" className={classes.buttons1}>\n            <Button onClick={handleClickOpen}>Manage keywords</Button>\n            <IconButton>\n              <RLink to=\"statistics\">\n                <EqualizerIcon color=\"action\" />\n              </RLink>\n            </IconButton>\n            <IconButton\n              ref={anchorRef}\n              aria-controls={open ? \"menu-list-grow\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleToggle}\n              id=\"sortByUnDone\"\n              title=\"sort by undone\"\n              // onClick={sortByUnDone}\n              size=\"small\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              <Badge badgeContent={allNotitfications.length} color=\"secondary\">\n                <NotificationImportantIcon color=\"action\" />\n              </Badge>\n            </IconButton>\n            {allNotitfications.length !== 0 && (\n              <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                style={{ overflowY: \"auto\", height: \"300px\" }}\n                transition\n                disablePortal\n              >\n                {({ TransitionProps, placement }) => (\n                  <Grow\n                    {...TransitionProps}\n                    style={{\n                      transformOrigin:\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                    }}\n                  >\n                    <Paper>\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <List\n                          autoFocusItem={open}\n                          onKeyDown={handleListKeyDown}\n                        >\n                          {allNotitfications.length !== 0 &&\n                            allNotitfications.map((not) => {\n                              return (\n                                <ListItem\n                                  style={{ marginTop: \"2rem\", display: \"grid\" }}\n                                  severity=\"info\"\n                                >\n                                  <Typography>{not.text}</Typography>\n                                  <Typography>\n                                    {moment(not.date).format(\n                                      \"DD-MM-YY, hh:mm A\"\n                                    )}\n                                  </Typography>\n                                  <Typography>{not.Title}</Typography>\n                                  <Link\n                                  style={{cursor: \"pointer\"}}\n                                    onClick={() =>\n                                      handleUpdate(not._id, not.type)\n                                    }\n                                  >\n                                    mark as read\n                                  </Link>\n                                  <Divider/>\n                                </ListItem>\n                              );\n                            })}\n                        </List>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Grow>\n                )}\n              </Popper>\n            )}\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Search;\n","/app/client/src/reportWebVitals.js",[],["47","48"],"/app/client/src/components/ByLables.js",["49"],"/app/client/src/api/index.js",[],["50","51"],"/app/client/src/components/Pastes.js",["52","53","54","55","56","57","58","59"],"/app/client/src/index.js",[],"/app/client/src/components/Notifications.js",["60","61","62","63"],"/app/client/src/components/Tags.js",[],"/app/client/src/components/ByName.js",["64"],"/app/client/src/components/Lables.js",["65","66"],{"ruleId":"67","severity":1,"message":"68","line":119,"column":10,"nodeType":"69","messageId":"70","endLine":119,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":157,"column":6,"nodeType":"73","endLine":157,"endColumn":8,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"67","severity":1,"message":"79","line":11,"column":8,"nodeType":"69","messageId":"70","endLine":11,"endColumn":14},{"ruleId":"75","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"67","severity":1,"message":"82","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"83","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":11},{"ruleId":"67","severity":1,"message":"84","line":6,"column":8,"nodeType":"69","messageId":"70","endLine":6,"endColumn":14},{"ruleId":"67","severity":1,"message":"85","line":9,"column":8,"nodeType":"69","messageId":"70","endLine":9,"endColumn":30},{"ruleId":"67","severity":1,"message":"86","line":14,"column":8,"nodeType":"69","messageId":"70","endLine":14,"endColumn":18},{"ruleId":"67","severity":1,"message":"87","line":15,"column":8,"nodeType":"69","messageId":"70","endLine":15,"endColumn":25},{"ruleId":"67","severity":1,"message":"88","line":31,"column":10,"nodeType":"69","messageId":"70","endLine":31,"endColumn":16},{"ruleId":"67","severity":1,"message":"89","line":31,"column":18,"nodeType":"69","messageId":"70","endLine":31,"endColumn":27},{"ruleId":"67","severity":1,"message":"90","line":1,"column":28,"nodeType":"69","messageId":"70","endLine":1,"endColumn":36},{"ruleId":"67","severity":1,"message":"84","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":14},{"ruleId":"67","severity":1,"message":"83","line":6,"column":8,"nodeType":"69","messageId":"70","endLine":6,"endColumn":11},{"ruleId":"67","severity":1,"message":"91","line":35,"column":9,"nodeType":"69","messageId":"70","endLine":35,"endColumn":20},{"ruleId":"67","severity":1,"message":"79","line":11,"column":8,"nodeType":"69","messageId":"70","endLine":11,"endColumn":14},{"ruleId":"67","severity":1,"message":"90","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"92","line":41,"column":6,"nodeType":"73","endLine":41,"endColumn":14,"suggestions":"93"},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getKeyWord'. Either include it or remove the dependency array.","ArrayExpression",["94"],"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'moment' is defined but never used.",["95"],["96"],"'useEffect' is defined but never used.","'api' is defined but never used.","'Button' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'IconButton' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'pastes' is assigned a value but never used.","'setPastes' is assigned a value but never used.","'useState' is defined but never used.","'handleClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPastes'. Either include it or remove the dependency array. If 'setPastes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["97"],{"desc":"98","fix":"99"},"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [getKeyWord]",{"range":"102","text":"103"},"Update the dependencies array to be: [lables, setPastes]",{"range":"104","text":"105"},[4434,4436],"[getKeyWord]",[1239,1247],"[lables, setPastes]"]