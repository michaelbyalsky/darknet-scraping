[{"/app/client/src/components/Logs.js":"1","/app/client/src/reportWebVitals.js":"2","/app/client/src/components/Search.js":"3","/app/client/src/index.js":"4","/app/client/src/api/index.js":"5","/app/client/src/components/Notifications.js":"6","/app/client/src/components/Pastes.js":"7"},{"size":1514,"mtime":1606961388237,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1606673647310,"results":"10","hashOfConfig":"9"},{"size":10005,"mtime":1606966869318,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1606910761884,"results":"12","hashOfConfig":"9"},{"size":434,"mtime":1606959869483,"results":"13","hashOfConfig":"9"},{"size":2241,"mtime":1606967593612,"results":"14","hashOfConfig":"9"},{"size":3492,"mtime":1606983927811,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"jg9a1a",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/app/client/src/components/Logs.js",["34","35","36"],"import React, { useState, useEffect } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport api from \"../api/index\"; \nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\n\nconst columns = [\n  { field: \"id\", headerName: \"Mongo Id\", width: 130 },\n  { field: \"_id\", headerName: \"Mongo Id\", width: 130 },\n  { field: \"status\", headerName: \"Status\", width: 130 },\n  { field: \"new_pastes\", headerName: \"New Pastes\", width: 130 },\n  { field: \"date\", headerName: \"Date\", width: 180 },\n\n];\n\nconst Logs = () => {\n  const [logs, setLogs] = useState([]);\n \n\n  const fetchLogs = async () => {\n    try {\n      const { data } = await api.getPastes(`http://localhost:5000/api/v1/logs`);\n      \n      const maped = data.map((log, i) => {\n          return {\n              id: i + 1,\n              _id: log._id,\n              status: log.status,\n              new_pastes: log.new_pastes,\n              date: log.date\n          }\n      })\n      const sorted = maped.sort((a,b) => {\n        // Turn your strings into dates, and then subtract them\n        // to get a value that is either negative, positive, or zero.\n        return new Date(b.date) - new Date(a.date);\n      });\n      setLogs(sorted);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n    <DataGrid  id={Math.random()} rows={logs} columns={columns} pageSize={5} checkboxSelection />\n  </div>\n  );\n};\n\nexport default Logs;\n","/app/client/src/reportWebVitals.js",[],"/app/client/src/components/Search.js",["37","38"],"/app/client/src/index.js",[],["39","40"],"/app/client/src/api/index.js",[],"/app/client/src/components/Notifications.js",["41","42","43","44"],"import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport api from \"../api/index\";\nimport moment from \"moment\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Notifications({ faildLogs, keyword1 }) {\n  const classes = useStyles();\n  const [openLogs, setOpenLogs] = React.useState(false);\n  const [openKeyWord1, setOpenKeyWord1] = React.useState(false);\n\n  const handleClick = () => {\n    setOpenLogs(true);\n  };\n\n  useEffect(() => {\n    const filtered = faildLogs.filter((logs) => {\n      return (\n        moment(logs.date).toDate().valueOf() >\n        moment().subtract(2, \"minutes\").valueOf()\n      );\n    });\n    if (filtered.length > 0) {\n      setOpenLogs(true);\n    }\n  }, [faildLogs]);\n\n  useEffect(() => {\n    const filtered = keyword1.filter((pastes) => {\n      return (\n        moment(pastes.date).toDate().valueOf() >\n        moment().subtract(8, \"hours\").valueOf()\n      );\n    });\n    if (filtered.length > 0) {\n      setOpenKeyWord1(true);\n    }\n  }, [keyword1]);\n\n\n\n  const handleCloseLogs = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenLogs(false);\n  };\n\n  const handleCloseKeyword1 = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenKeyWord1(false);\n  };\n\n\n  return (\n    <div className={classes.root}>\n      <Snackbar\n        open={openLogs}\n        autoHideDuration={6000}\n        onClose={handleCloseLogs}\n      >\n        <Alert onClose={handleCloseLogs} severity=\"error\">\n          scrawler crashed\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={openKeyWord1}\n        autoHideDuration={6000}\n        onClose={handleCloseKeyword1}\n      >\n        <Alert onClose={handleCloseKeyword1} severity=\"info\">\n          new paste with keyword Money Detached!\n        </Alert>\n      </Snackbar>\n    \n    </div>\n  );\n}\n","/app/client/src/components/Pastes.js",["45","46","47","48","49","50","51","52"],"import React, { useEffect, useState } from \"react\";\nimport api from \"../api/index\";\nimport List from \"@material-ui/core/List\";\nimport \"./Pastes.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport Tags from './Tags'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    overflow: \"auto\",\n  },\n}));\n\n\nexport default function Pastes({ paste }) {\n  const [expanded, setExpanded] = useState(false); //set the state of the accordion\n  const classes = useStyles();\n  const [pastes, setPastes] = useState([]);\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div>\n      <div className=\"ticket\">\n        <div className=\"section_1\">\n          <Accordion\n            expanded={expanded === paste._id}\n            onChange={handleChange(paste._id)}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1bh-content\"\n              id=\"panel1bh-header\"\n            >\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <Typography gutterBottom variant=\"h6\">\n                    {paste.Title}\n                  </Typography>\n                </Grid>\n                {/* <Grid item xs>\n                      {ticket.updated === true && <CheckCircleOutlineIcon />}\n                    </Grid> */}\n              </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n              <List className={classes.root}>\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  {paste.Content}\n                </Typography>\n              </List>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <Grid container alignItems=\"center\">\n          <Grid item xs>\n            \n            <Typography gutterBottom>\n              \n              {`by ${paste.Author} | ${paste.Date}`}\n            </Typography>\n          </Grid>\n          <Grid item>\n            {/* <Typography gutterBottom variant=\"h6\">\n                  <IconButton\n                    classes={{ root: \"hideTicketButton\" }}\n                    onClick={() => hideTicket(ticket)}\n                    title=\"hide\"\n                  >\n                    <VisibilityOffIcon />\n                  </IconButton>\n                </Typography> */}\n          </Grid>\n        </Grid>\n        <div className=\"status\">\n              <Grid container alignItems=\"center\">\n               { paste.Lables !== undefined && \n                <Grid item>\n                  {paste.Lables.length !== 0 && (\n                    <Tags className=\"labels\" tags={paste.Lables} />\n                  )}\n                </Grid>\n               }\n              </Grid>\n            </div> \n      </div>\n    </div>\n  );\n}\n",{"ruleId":"53","severity":1,"message":"54","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":14},{"ruleId":"53","severity":1,"message":"57","line":4,"column":16,"nodeType":"55","messageId":"56","endLine":4,"endColumn":24},{"ruleId":"53","severity":1,"message":"58","line":4,"column":26,"nodeType":"55","messageId":"56","endLine":4,"endColumn":38},{"ruleId":"53","severity":1,"message":"59","line":103,"column":10,"nodeType":"55","messageId":"56","endLine":103,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":140,"column":6,"nodeType":"62","endLine":140,"endColumn":8,"suggestions":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"53","severity":1,"message":"68","line":1,"column":28,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"69","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":14},{"ruleId":"53","severity":1,"message":"70","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":11},{"ruleId":"53","severity":1,"message":"71","line":27,"column":9,"nodeType":"55","messageId":"56","endLine":27,"endColumn":20},{"ruleId":"53","severity":1,"message":"72","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"70","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":11},{"ruleId":"53","severity":1,"message":"69","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":14},{"ruleId":"53","severity":1,"message":"73","line":9,"column":8,"nodeType":"55","messageId":"56","endLine":9,"endColumn":30},{"ruleId":"53","severity":1,"message":"74","line":14,"column":8,"nodeType":"55","messageId":"56","endLine":14,"endColumn":18},{"ruleId":"53","severity":1,"message":"75","line":15,"column":8,"nodeType":"55","messageId":"56","endLine":15,"endColumn":25},{"ruleId":"53","severity":1,"message":"76","line":31,"column":10,"nodeType":"55","messageId":"56","endLine":31,"endColumn":16},{"ruleId":"53","severity":1,"message":"77","line":31,"column":18,"nodeType":"55","messageId":"56","endLine":31,"endColumn":27},"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Alert' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getKeyWord'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'useState' is defined but never used.","'Button' is defined but never used.","'api' is defined but never used.","'handleClick' is assigned a value but never used.","'useEffect' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'IconButton' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'pastes' is assigned a value but never used.","'setPastes' is assigned a value but never used.",{"desc":"81","fix":"82"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getKeyWord]",{"range":"83","text":"84"},[3847,3849],"[getKeyWord]"]