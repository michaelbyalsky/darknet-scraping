[{"/app/client/src/components/Search.js":"1","/app/client/src/reportWebVitals.js":"2","/app/client/src/components/ByLables.js":"3","/app/client/src/api/index.js":"4","/app/client/src/components/Pastes.js":"5","/app/client/src/index.js":"6","/app/client/src/components/Notifications.js":"7","/app/client/src/components/Tags.js":"8","/app/client/src/components/ByName.js":"9","/app/client/src/components/Lables.js":"10","/app/client/src/components/ByDate.js":"11","/app/client/src/App.js":"12"},{"size":12648,"mtime":1609265827182,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1609265815862,"results":"15","hashOfConfig":"14"},{"size":1020,"mtime":1609265815858,"results":"16","hashOfConfig":"14"},{"size":542,"mtime":1609265827178,"results":"17","hashOfConfig":"14"},{"size":3533,"mtime":1609265815858,"results":"18","hashOfConfig":"14"},{"size":500,"mtime":1609265815858,"results":"19","hashOfConfig":"14"},{"size":2776,"mtime":1609265827182,"results":"20","hashOfConfig":"14"},{"size":577,"mtime":1609265815858,"results":"21","hashOfConfig":"14"},{"size":1016,"mtime":1609265815858,"results":"22","hashOfConfig":"14"},{"size":1969,"mtime":1609265827178,"results":"23","hashOfConfig":"14"},{"size":1021,"mtime":1609265815854,"results":"24","hashOfConfig":"14"},{"size":518,"mtime":1609265815854,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"jg9a1a",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/client/src/components/Search.js",["59","60"],"import React, { useEffect, useState } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Badge from \"@material-ui/core/Badge\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChooseLabels from \"./Lables\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Link from \"@material-ui/core/Link\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport api from \"../api/index\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport { Link as RLink } from \"react-router-dom\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport Divider from \"@material-ui/core/Divider\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    width: \"10px\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  appBar: {\n    position: \"fixed\",\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  toolbar: {\n    minHeight: 0,\n    alignItems: \"flex-start\",\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n  },\n  buttons2: {\n    width: \"300px\",\n  },\n  buttons1: {\n    marginLeft: \"25rem\",\n    width: \"300px\",\n    alignSelf: \"flex-end\",\n  },\n  button: {\n    margin: \"2px\",\n  },\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Search = ({\n  setAllNotitfications,\n  searchText,\n  handleChange,\n  pastes,\n  setPastes,\n  allNotitfications,\n  keyword1,\n  options,\n  setOptions,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [newKeyWord, setNewKeyword] = React.useState(\"\");\n  const [lables, setLables] = useState([]);\n  const [removeOption, setRemoveOption] = useState(null);\n\n  const getKeyWord = async () => {\n    try {\n      const { data } = await api.getPastes(\"/pastes/keyword\");\n      const obj = data.map((label) => {\n        return { value: label.name, label: label.name };\n      });\n      obj.push({ value: \"All\", label: \"All\" });\n      setOptions(obj);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getKeyWord();\n  }, []);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClickOpen = () => {\n    setModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  const handleAddKeyword = async () => {\n    try {\n      setModalOpen(false);\n      await api.create(\"/pastes/keyword\", { name: newKeyWord });\n      setNewKeyword(\"\");\n      getKeyWord();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  const handleUpdate = async (id, type) => {\n    try {\n      if (type === \"keyword\") {\n        await api.update(\"/pastes\", { _id: id });\n        const filtered = allNotitfications.filter((not) => {\n          return not._id !== id;\n        });\n        setAllNotitfications(filtered);\n      } else {\n        await api.update(\"/logs\", { _id: id });\n      }\n      const filtered = allNotitfications.filter((not) => {\n        return not._id !== id;\n      });\n      setAllNotitfications(filtered);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleRemove = async () => {\n    try {\n      console.log(removeOption);\n      await api.update(\"/pastes/keyword\", { name: removeOption });\n      getKeyWord();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className={classes.grow}>\n      <AppBar size=\"small\" className={classes.appBar} id=\"wrapper\">\n        <Toolbar className={classes.toolbar}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            DarkNet\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              size=\"small\"\n              id=\"searchInput\"\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              value={searchText}\n              onChange={(e) => handleChange(e)}\n            />\n          </div>\n\n          <div id=\"buttons\" className={classes.buttons2}>\n            <ChooseLabels\n              lables={lables}\n              setLables={setLables}\n              options={options}\n              setOptions={setOptions}\n              pastes={pastes}\n              setPastes={setPastes}\n            />\n          </div>\n          <div>\n            <Dialog\n              open={modalOpen}\n              onClose={handleModalClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">Manage keywords</DialogTitle>\n              <DialogContent>\n                <DialogContentText>add a new keyword</DialogContentText>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  label=\"new keyword\"\n                  type=\"text\"\n                  fullWidth\n                  onChange={(e) => setNewKeyword(e.target.value)}\n                />\n                <FormControl>\n                  <InputLabel id=\"demo-simple-select-helper-label\">\n                    Remove\n                  </InputLabel>\n                  <Select\n                    InputLabelProps={{ shrink: true }}\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={removeOption}\n                    onChange={(e) => setRemoveOption(e.target.value)}\n                  >\n                    {options.map(\n                      (option) =>\n                        option.value !== \"All\" && (\n                          <MenuItem value={option.value}>\n                            {option.value}\n                          </MenuItem>\n                        )\n                    )}\n                  </Select>\n                  <Button color=\"secondary\" onClick={handleRemove}>\n                    remove\n                  </Button>\n                </FormControl>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleModalClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={handleAddKeyword} color=\"primary\">\n                  Add\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n\n          <div id=\"buttons\" className={classes.buttons1}>\n            <Button onClick={handleClickOpen}>Manage keywords</Button>\n            <IconButton>\n              <RLink to=\"statistics\">\n                <EqualizerIcon color=\"action\" />\n              </RLink>\n            </IconButton>\n            <IconButton\n              ref={anchorRef}\n              aria-controls={open ? \"menu-list-grow\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleToggle}\n              id=\"sortByUnDone\"\n              title=\"sort by undone\"\n              // onClick={sortByUnDone}\n              size=\"small\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              <Badge badgeContent={allNotitfications.length} color=\"secondary\">\n                <NotificationImportantIcon color=\"action\" />\n              </Badge>\n            </IconButton>\n            {allNotitfications.length !== 0 && (\n              <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                style={{ overflowY: \"auto\", height: \"300px\" }}\n                transition\n                disablePortal\n              >\n                {({ TransitionProps, placement }) => (\n                  <Grow\n                    {...TransitionProps}\n                    style={{\n                      transformOrigin:\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                    }}\n                  >\n                    <Paper>\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <List\n                          autoFocusItem={open}\n                          onKeyDown={handleListKeyDown}\n                        >\n                          {allNotitfications.length !== 0 &&\n                            allNotitfications.map((not) => {\n                              return (\n                                <ListItem\n                                  style={{ marginTop: \"2rem\", display: \"grid\" }}\n                                  severity=\"info\"\n                                >\n                                  <Typography>{not.text}</Typography>\n                                  <Typography>\n                                    {moment(not.date).format(\n                                      \"DD-MM-YY, hh:mm A\"\n                                    )}\n                                  </Typography>\n                                  <Typography>{not.Title}</Typography>\n                                  <Link\n                                  style={{cursor: \"pointer\"}}\n                                    onClick={() =>\n                                      handleUpdate(not._id, not.type)\n                                    }\n                                  >\n                                    mark as read\n                                  </Link>\n                                  <Divider/>\n                                </ListItem>\n                              );\n                            })}\n                        </List>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Grow>\n                )}\n              </Popper>\n            )}\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Search;\n",["61","62"],"/app/client/src/reportWebVitals.js",[],["63","64"],"/app/client/src/components/ByLables.js",["65"],"import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport moment from \"moment\";\nimport api from \"../api/index\";\n\nconst PastesByName = () => {\n  const [sessions, setSessions] = useState([]);\n\n  const fetchSessions = async () => {\n    try {\n      const { data } = await api.getPastes(`/pastes/ner`);\n      setSessions(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n\n  console.log(sessions);\n\n  return (\n    <div>\n      <h1 className=\"header\">Pastes by ner analysies</h1>\n\n      <div className=\"chartWrapper\">\n      <BarChart width={900} height={250} data={sessions}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"label\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"sum\" fill=\"#8884d8\" />\n        </BarChart>\n      </div>\n    </div>\n  );\n};\n\nexport default PastesByName;\n",["66","67"],"/app/client/src/api/index.js",[],"/app/client/src/components/Pastes.js",["68","69","70","71","72","73","74","75"],"/app/client/src/index.js",[],"/app/client/src/components/Notifications.js",["76","77","78","79"],"import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport api from \"../api/index\";\nimport moment from \"moment\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  bar: {\n    marginTop: \"0rem\",\n    position: \"fixed\",\n    zIndex: \"300\",\n    width: \"100%\",\n    marginLeft: \"1000px\",\n    marginRight: 0,\n  }\n}));\n\nexport default function Notifications({ lastLog, faildLogs, keyword1 }) {\n  const classes = useStyles();\n  const [openLogs, setOpenLogs] = React.useState(false);\n  const [openKeyWord1, setOpenKeyWord1] = React.useState(false);\n\n  const handleClick = () => {\n    setOpenLogs(true);\n  };\n\n  useEffect(() => {\n    const filtered = faildLogs.filter((logs) => {\n      return (\n        moment(logs.date).toDate().valueOf() >\n        moment().subtract(4, \"minutes\").valueOf()\n      );\n    });\n    console.log(filtered);\n    if (filtered.length !== 0) {\n      setOpenLogs(true);\n    }\n  }, [faildLogs]);\n\n  useEffect(() => {\n    const filtered = keyword1.filter((pastes) => {\n      return (\n        moment(pastes.date).toDate().valueOf() >\n        moment().subtract(4, \"minuts\").valueOf()\n      );\n    });\n    if (filtered.length > 0) {\n      setOpenKeyWord1(true);\n    }\n  }, [keyword1]);\n\n  const handleCloseLogs = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenLogs(false);\n  };\n\n  const handleCloseKeyword1 = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpenKeyWord1(false);\n  };\n  return (\n    <div className={classes.root}>\n      {lastLog !== null && (\n        <div className={classes.bar}>\n        <Alert severity={lastLog.status === \"success\" ? \"success\" : \"error\"}>\n          {`Status: scrawl ${lastLog.status} in ${moment(lastLog.date).format(\n            \"DD-MM-YY, hh:mm A\"\n          )}, ${lastLog.new_pastes} pastes added`}\n        </Alert>\n        </div>\n      )}\n      <Snackbar\n        open={openLogs}\n        autoHideDuration={6000}\n        onClose={handleCloseLogs}\n      >\n        <Alert onClose={handleCloseLogs} severity=\"error\">\n          scrawler crashed\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={openKeyWord1}\n        autoHideDuration={6000}\n        onClose={handleCloseKeyword1}\n      >\n        <Alert onClose={handleCloseKeyword1} severity=\"info\">\n          new paste with keyword Detached - check notifictions!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","/app/client/src/components/Tags.js",[],"/app/client/src/components/ByName.js",["80"],"import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport moment from \"moment\";\nimport api from \"../api/index\";\n\nconst PastesByName = () => {\n  const [sessions, setSessions] = useState([]);\n\n  const fetchSessions = async () => {\n    try {\n      const { data } = await api.getPastes(`/pastes/name`);\n      setSessions(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n\n  console.log(sessions);\n\n  return (\n    <div>\n      <h1 className=\"header\">Pastes by name</h1>\n\n      <div className=\"chartWrapper\">\n        <BarChart width={1200} height={250} data={sessions}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"Author\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"sum\" fill=\"#8884d8\" />\n        </BarChart>\n      </div>\n    </div>\n  );\n};\n\nexport default PastesByName;\n","/app/client/src/components/Lables.js",["81","82"],"import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport api from \"../api/index\";\nimport moment from 'moment'\n// import network from '../../services/network';\n\n// const options = [\n//   { value: \"Guns\", label: \"Guns\" },\n//   { value: \"Money\", label: \"Money\" },\n//   { value: \"All\", label: \"All\" },\n// ];\n\nconst ChooseLabels = ({lables, setLables, pastes, setPastes, options, setOptions }) => {\n\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (lables.length === 0 || !lables) {\n          return;\n        }\n        if (lables.value === \"All\") {\n          const { data: allPastes } = await api.getPastes(`/pastes`);\n          const allFiltered = allPastes.sort((a, b) => {\n            console.log(moment(b.Date).toDate())\n            return new Date(b.Date) - new Date(a.Date);\n          });\n          return setPastes(allFiltered);\n        }\n        const { data: filtered } = await api.getPastes(\n          `/pastes/search?search=${lables.value}`\n        );\n        const allFiltered = filtered.sort((a, b) => {\n            return new Date(b.Date) - new Date(a.Date);\n          });\n        setPastes(allFiltered);\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  }, [lables]);\n  const customStyles = {\n    option: (provided) => ({\n      ...provided,\n      color: \"black\",\n      backgroundColor: \"blue\",\n      borderBottom: \"1px dotted black\",\n      height: \"100%\",\n      width: \"100%\",\n    }),\n    control: (provided) => ({\n      ...provided,\n      backgroundColor: \"neutral30\",\n    }),\n  };\n  return (\n    <div className=\"labelFilter\">\n      <Select\n        value={lables}\n        className=\"selectLabels\"\n        maxMenuHeight={300}\n        placeholder=\"select keywords\"\n        name=\"labels\"\n        onChange={(choosens) => setLables(choosens)}\n        closeMenuOnSelect={false}\n        options={options}\n        styles={customStyles}\n      />\n    </div>\n  );\n};\n\nexport default ChooseLabels;\n","/app/client/src/components/ByDate.js",["83"],"import React, { useState, useEffect } from \"react\";\nimport {\n    LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport moment from \"moment\";\nimport api from \"../api/index\";\n\nconst PastesByDate = () => {\n  const [sessions, setSessions] = useState([]);\n\n  const fetchSessions = async () => {\n    try {\n      const { data } = await api.getPastes(`/pastes/by-day`);\n      setSessions(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n\n  console.log(sessions);\n\n  return (\n    <div>\n      <h1 className=\"header\">Pastes by date</h1>\n\n      <div className=\"chartWrapper\">\n      <LineChart width={1200} height={250} data={sessions}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line dataKey=\"sum\" fill=\"#8884d8\" />\n        </LineChart>\n      </div>\n    </div>\n  );\n};\n\nexport default PastesByDate;\n","/app/client/src/App.js",["84","85","86"],{"ruleId":"87","severity":1,"message":"88","line":119,"column":10,"nodeType":"89","messageId":"90","endLine":119,"endColumn":15},{"ruleId":"91","severity":1,"message":"92","line":157,"column":6,"nodeType":"93","endLine":157,"endColumn":8,"suggestions":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"95","replacedBy":"99"},{"ruleId":"97","replacedBy":"100"},{"ruleId":"87","severity":1,"message":"101","line":11,"column":8,"nodeType":"89","messageId":"90","endLine":11,"endColumn":14},{"ruleId":"95","replacedBy":"102"},{"ruleId":"97","replacedBy":"103"},{"ruleId":"87","severity":1,"message":"104","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"105","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":11},{"ruleId":"87","severity":1,"message":"106","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":14},{"ruleId":"87","severity":1,"message":"107","line":9,"column":8,"nodeType":"89","messageId":"90","endLine":9,"endColumn":30},{"ruleId":"87","severity":1,"message":"108","line":14,"column":8,"nodeType":"89","messageId":"90","endLine":14,"endColumn":18},{"ruleId":"87","severity":1,"message":"109","line":15,"column":8,"nodeType":"89","messageId":"90","endLine":15,"endColumn":25},{"ruleId":"87","severity":1,"message":"110","line":31,"column":10,"nodeType":"89","messageId":"90","endLine":31,"endColumn":16},{"ruleId":"87","severity":1,"message":"111","line":31,"column":18,"nodeType":"89","messageId":"90","endLine":31,"endColumn":27},{"ruleId":"87","severity":1,"message":"112","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"106","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":14},{"ruleId":"87","severity":1,"message":"105","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":11},{"ruleId":"87","severity":1,"message":"113","line":35,"column":9,"nodeType":"89","messageId":"90","endLine":35,"endColumn":20},{"ruleId":"87","severity":1,"message":"101","line":11,"column":8,"nodeType":"89","messageId":"90","endLine":11,"endColumn":14},{"ruleId":"87","severity":1,"message":"112","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"114","line":41,"column":6,"nodeType":"93","endLine":41,"endColumn":14,"suggestions":"115"},{"ruleId":"87","severity":1,"message":"101","line":11,"column":8,"nodeType":"89","messageId":"90","endLine":11,"endColumn":14},{"ruleId":"87","severity":1,"message":"112","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"104","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"116","line":1,"column":38,"nodeType":"89","messageId":"90","endLine":1,"endColumn":49},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getKeyWord'. Either include it or remove the dependency array.","ArrayExpression",["117"],"no-native-reassign",["118"],"no-negated-in-lhs",["119"],["118"],["119"],"'moment' is defined but never used.",["118"],["119"],"'useEffect' is defined but never used.","'api' is defined but never used.","'Button' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'IconButton' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'pastes' is assigned a value but never used.","'setPastes' is assigned a value but never used.","'useState' is defined but never used.","'handleClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPastes'. Either include it or remove the dependency array. If 'setPastes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["120"],"'useCallback' is defined but never used.",{"desc":"121","fix":"122"},"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [getKeyWord]",{"range":"125","text":"126"},"Update the dependencies array to be: [lables, setPastes]",{"range":"127","text":"128"},[4434,4436],"[getKeyWord]",[1239,1247],"[lables, setPastes]"]