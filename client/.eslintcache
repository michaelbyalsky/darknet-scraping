[{"/app/client/src/index.js":"1","/app/client/src/components/Search.js":"2","/app/client/src/App.js":"3","/app/client/src/components/Lables.js":"4","/app/client/src/reportWebVitals.js":"5","/app/client/src/components/Notifications.js":"6","/app/client/src/api/index.js":"7","/app/client/src/components/Logs.js":"8","/app/client/src/components/Pastes.js":"9","/app/client/src/components/Tags.js":"10","/app/client/src/components/PastesList.js":"11","/app/client/src/components/Statistics.js":"12","/app/client/src/components/ByName.js":"13"},{"size":500,"mtime":1606910761884,"results":"14","hashOfConfig":"15"},{"size":10817,"mtime":1607119401618,"results":"16","hashOfConfig":"15"},{"size":518,"mtime":1607119353142,"results":"17","hashOfConfig":"15"},{"size":1967,"mtime":1607128538843,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1606673647310,"results":"19","hashOfConfig":"15"},{"size":2248,"mtime":1607003290983,"results":"20","hashOfConfig":"15"},{"size":434,"mtime":1606959869483,"results":"21","hashOfConfig":"15"},{"size":1514,"mtime":1606961388237,"results":"22","hashOfConfig":"15"},{"size":3533,"mtime":1607126634395,"results":"23","hashOfConfig":"15"},{"size":577,"mtime":1606910749768,"results":"24","hashOfConfig":"15"},{"size":4884,"mtime":1607126495481,"results":"25","hashOfConfig":"15"},{"size":1308,"mtime":1607131473833,"results":"26","hashOfConfig":"15"},{"size":1015,"mtime":1607132310092,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jg9a1a",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/client/src/index.js",[],["59","60"],"/app/client/src/components/Search.js",["61","62"],"import React, { useEffect, useState } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Badge from \"@material-ui/core/Badge\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChooseLabels from \"./Lables\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Link from \"@material-ui/core/Link\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport api from \"../api/index\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport { Link as RLink } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"10px\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  appBar: {\n    position: \"fixed\",\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  toolbar: {\n    minHeight: 0,\n    alignItems: \"flex-start\",\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n  },\n  buttons2: {\n    width: \"400px\",\n  },\n  buttons1: {\n    marginRigth: -1,\n    width: \"400px\",\n    alignSelf: \"flex-end\",\n  },\n  button: {\n    margin: \"2px\",\n  },\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Search = ({\n  setAllNotitfications,\n  searchText,\n  handleChange,\n  pastes,\n  setPastes,\n  allNotitfications,\n  keyword1,\n  options,\n  setOptions,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [newKeyWord, setNewKeyword] = React.useState(\"\");\n  const [lables, setLables] = useState([]);\n\n  const getKeyWord = async () => {\n    try {\n      const { data } = await api.getPastes(\"/pastes/keyword\");\n      const obj = data.map((label) => {\n        return { value: label.name, label: label.name };\n      });\n      obj.push({ value: \"All\", label: \"All\" });\n      setOptions(obj);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getKeyWord();\n  }, []);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClickOpen = () => {\n    setModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  const handleAddKeyword = async () => {\n    try {\n      setModalOpen(false);\n      await api.create(\"/pastes/keyword\", { name: newKeyWord });\n      setNewKeyword(\"\");\n      getKeyWord();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  const handleUpdate = async (id, type) => {\n    try {\n      if (type === \"keyword\") {\n        await api.update(\"/pastes\", { _id: id });\n        const filtered = allNotitfications.filter((not) => {\n          return not._id !== id;\n        });\n        setAllNotitfications(filtered);\n      } else {\n        await api.update(\"/logs\", { _id: id });\n      }\n      const filtered = allNotitfications.filter((not) => {\n        return not._id !== id;\n      });\n      setAllNotitfications(filtered);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className={classes.grow}>\n      <AppBar size=\"small\" className={classes.appBar} id=\"wrapper\">\n        <Toolbar className={classes.toolbar}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            DarkNet\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              size=\"small\"\n              id=\"searchInput\"\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              value={searchText}\n              onChange={(e) => handleChange(e)}\n            />\n          </div>\n          <div sytle={{ width: \"100px\" }}></div>\n          <div />\n          <div id=\"buttons\" className={classes.buttons2}>\n            <ChooseLabels\n              lables={lables}\n              setLables={setLables}\n              options={options}\n              setOptions={setOptions}\n              pastes={pastes}\n              setPastes={setPastes}\n            />\n          </div>\n          <div>\n            <Dialog\n              open={modalOpen}\n              onClose={handleModalClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">Add keyword</DialogTitle>\n              <DialogContent>\n                <DialogContentText>add a new keyword</DialogContentText>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  label=\"new keyword\"\n                  type=\"text\"\n                  fullWidth\n                  onChange={(e) => setNewKeyword(e.target.value)}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleModalClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={handleAddKeyword} color=\"primary\">\n                  Add\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n\n          <div id=\"buttons\" className={classes.buttons1}>\n            <Button onClick={handleClickOpen}>add keyword</Button>\n          <Button><RLink to='statistics'>Dasboard</RLink></Button>\n            <IconButton\n              ref={anchorRef}\n              aria-controls={open ? \"menu-list-grow\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleToggle}\n              id=\"sortByUnDone\"\n              title=\"sort by undone\"\n              // onClick={sortByUnDone}\n              size=\"small\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              <Badge badgeContent={allNotitfications.length} color=\"secondary\">\n                <NotificationImportantIcon color=\"action\" />\n              </Badge>\n            </IconButton>\n            {allNotitfications.length !== 0 && (\n              <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                style={{ overflowY: \"auto\", height: \"300px\" }}\n                transition\n                disablePortal\n              >\n                {({ TransitionProps, placement }) => (\n                  <Grow\n                    {...TransitionProps}\n                    style={{\n                      transformOrigin:\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                    }}\n                  >\n                    <Paper>\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <List\n                          autoFocusItem={open}\n                          onKeyDown={handleListKeyDown}\n                        >\n                          {allNotitfications.length !== 0 &&\n                            allNotitfications.map((not) => {\n                              return (\n                                <ListItem\n                                  style={{ marginTop: \"2rem\", display: \"grid\" }}\n                                  severity=\"info\"\n                                >\n                                  <Typography>{not.text}</Typography>\n                                  <Typography>\n                                    {moment(not.date).format(\n                                      \"DD-MM-YY, hh:mm A\"\n                                    )}\n                                  </Typography>\n                                  <Typography>{not.Title}</Typography>\n                                  <Link\n                                    onClick={() =>\n                                      handleUpdate(not._id, not.type)\n                                    }\n                                  >\n                                    mark as read\n                                  </Link>\n                                </ListItem>\n                              );\n                            })}\n                        </List>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Grow>\n                )}\n              </Popper>\n            )}\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Search;\n","/app/client/src/App.js",["63","64","65"],"/app/client/src/components/Lables.js",["66","67"],"/app/client/src/reportWebVitals.js",[],"/app/client/src/components/Notifications.js",["68","69","70","71"],"import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport api from \"../api/index\";\nimport moment from \"moment\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Notifications({ faildLogs, keyword1 }) {\n  const classes = useStyles();\n  const [openLogs, setOpenLogs] = React.useState(false);\n  const [openKeyWord1, setOpenKeyWord1] = React.useState(false);\n\n  const handleClick = () => {\n    setOpenLogs(true);\n  };\n\n  useEffect(() => {\n    const filtered = faildLogs.filter((logs) => {\n      return (\n        moment(logs.date).toDate().valueOf() >\n        moment().subtract(2, \"minutes\").valueOf()\n      );\n    });\n    if (filtered.length > 0) {\n      setOpenLogs(true);\n    }\n  }, [faildLogs]);\n\n  useEffect(() => {\n    const filtered = keyword1.filter((pastes) => {\n      return (\n        moment(pastes.date).toDate().valueOf() >\n        moment().subtract(8, \"hours\").valueOf()\n      );\n    });\n    if (filtered.length > 0) {\n      setOpenKeyWord1(true);\n    }\n  }, [keyword1]);\n\n  const handleCloseLogs = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenLogs(false);\n  };\n\n  const handleCloseKeyword1 = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenKeyWord1(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar\n        open={openLogs}\n        autoHideDuration={6000}\n        onClose={handleCloseLogs}\n      >\n        <Alert onClose={handleCloseLogs} severity=\"error\">\n          scrawler crashed\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={openKeyWord1}\n        autoHideDuration={6000}\n        onClose={handleCloseKeyword1}\n      >\n        <Alert onClose={handleCloseKeyword1} severity=\"info\">\n          new paste with keyword Detached - check notifictions!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","/app/client/src/api/index.js",[],"/app/client/src/components/Logs.js",["72","73","74"],"import React, { useState, useEffect } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport api from \"../api/index\"; \nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\n\nconst columns = [\n  { field: \"id\", headerName: \"Mongo Id\", width: 130 },\n  { field: \"_id\", headerName: \"Mongo Id\", width: 130 },\n  { field: \"status\", headerName: \"Status\", width: 130 },\n  { field: \"new_pastes\", headerName: \"New Pastes\", width: 130 },\n  { field: \"date\", headerName: \"Date\", width: 180 },\n\n];\n\nconst Logs = () => {\n  const [logs, setLogs] = useState([]);\n \n\n  const fetchLogs = async () => {\n    try {\n      const { data } = await api.getPastes(`http://localhost:5000/api/v1/logs`);\n      \n      const maped = data.map((log, i) => {\n          return {\n              id: i + 1,\n              _id: log._id,\n              status: log.status,\n              new_pastes: log.new_pastes,\n              date: log.date\n          }\n      })\n      const sorted = maped.sort((a,b) => {\n        // Turn your strings into dates, and then subtract them\n        // to get a value that is either negative, positive, or zero.\n        return new Date(b.date) - new Date(a.date);\n      });\n      setLogs(sorted);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n    <DataGrid  id={Math.random()} rows={logs} columns={columns} pageSize={5} checkboxSelection />\n  </div>\n  );\n};\n\nexport default Logs;\n","/app/client/src/components/Pastes.js",["75","76","77","78","79","80","81","82"],"import React, { useEffect, useState } from \"react\";\nimport api from \"../api/index\";\nimport List from \"@material-ui/core/List\";\nimport \"./Pastes.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport Tags from \"./Tags\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    overflow: \"auto\",\n  },\n}));\n\nexport default function Pastes({ paste }) {\n  const [expanded, setExpanded] = useState(false); //set the state of the accordion\n  const classes = useStyles();\n  const [pastes, setPastes] = useState([]);\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div>\n      <div className=\"ticket\">\n        <div className=\"section_1\">\n          <Accordion\n            expanded={expanded === paste._id}\n            onChange={handleChange(paste._id)}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1bh-content\"\n              id=\"panel1bh-header\"\n            >\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <Typography gutterBottom variant=\"h6\">\n                    {paste.Title}\n                  </Typography>\n                </Grid>\n                {/* <Grid item xs>\n                      {ticket.updated === true && <CheckCircleOutlineIcon />}\n                    </Grid> */}\n              </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n              <List className={classes.root}>\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  {paste.Content}\n                </Typography>\n              </List>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <Grid container alignItems=\"center\">\n          <Grid item xs>\n            <Typography gutterBottom>\n              {`by ${paste.Author} | ${moment(paste.Date).format(\n                \"DD-MM-YY, hh:mm A\"\n              )}`}\n            </Typography>\n          </Grid>\n          <Grid item>\n            {/* <Typography gutterBottom variant=\"h6\">\n                  <IconButton\n                    classes={{ root: \"hideTicketButton\" }}\n                    onClick={() => hideTicket(ticket)}\n                    title=\"hide\"\n                  >\n                    <VisibilityOffIcon />\n                  </IconButton>\n                </Typography> */}\n          </Grid>\n        </Grid>\n        <div className=\"status\">\n          <Grid container alignItems=\"center\">\n            {paste.Lables !== undefined && (\n              <Grid item>\n                {paste.Lables.length !== 0 && (\n                  <Tags className=\"labels\" tags={paste.Lables} />\n                )}\n              </Grid>\n            )}\n          </Grid>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/app/client/src/components/Tags.js",[],"/app/client/src/components/PastesList.js",["83","84","85","86"],"/app/client/src/components/Statistics.js",["87"],"/app/client/src/components/ByName.js",["88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":105,"column":10,"nodeType":"95","messageId":"96","endLine":105,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":142,"column":6,"nodeType":"99","endLine":142,"endColumn":8,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"101","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"102","line":1,"column":27,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"103","line":1,"column":38,"nodeType":"95","messageId":"96","endLine":1,"endColumn":49},{"ruleId":"93","severity":1,"message":"101","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"104","line":41,"column":6,"nodeType":"99","endLine":41,"endColumn":14,"suggestions":"105"},{"ruleId":"93","severity":1,"message":"101","line":1,"column":28,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"106","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":14},{"ruleId":"93","severity":1,"message":"107","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":11},{"ruleId":"93","severity":1,"message":"108","line":27,"column":9,"nodeType":"95","messageId":"96","endLine":27,"endColumn":20},{"ruleId":"93","severity":1,"message":"109","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":14},{"ruleId":"93","severity":1,"message":"110","line":4,"column":16,"nodeType":"95","messageId":"96","endLine":4,"endColumn":24},{"ruleId":"93","severity":1,"message":"111","line":4,"column":26,"nodeType":"95","messageId":"96","endLine":4,"endColumn":38},{"ruleId":"93","severity":1,"message":"102","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"107","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":11},{"ruleId":"93","severity":1,"message":"106","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":14},{"ruleId":"93","severity":1,"message":"112","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":30},{"ruleId":"93","severity":1,"message":"113","line":14,"column":8,"nodeType":"95","messageId":"96","endLine":14,"endColumn":18},{"ruleId":"93","severity":1,"message":"114","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":25},{"ruleId":"93","severity":1,"message":"115","line":31,"column":10,"nodeType":"95","messageId":"96","endLine":31,"endColumn":16},{"ruleId":"93","severity":1,"message":"116","line":31,"column":18,"nodeType":"95","messageId":"96","endLine":31,"endColumn":27},{"ruleId":"93","severity":1,"message":"117","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":14},{"ruleId":"97","severity":1,"message":"118","line":76,"column":24,"nodeType":"95","endLine":76,"endColumn":35},{"ruleId":"93","severity":1,"message":"119","line":110,"column":11,"nodeType":"95","messageId":"96","endLine":110,"endColumn":22},{"ruleId":"97","severity":1,"message":"120","line":132,"column":6,"nodeType":"99","endLine":132,"endColumn":15,"suggestions":"121"},{"ruleId":"93","severity":1,"message":"122","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":16},{"ruleId":"93","severity":1,"message":"117","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":14},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getKeyWord'. Either include it or remove the dependency array.","ArrayExpression",["125"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'setPastes'. Either include it or remove the dependency array. If 'setPastes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["126"],"'Button' is defined but never used.","'api' is defined but never used.","'handleClick' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'IconButton' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'pastes' is assigned a value but never used.","'setPastes' is assigned a value but never used.","'moment' is defined but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","'allFiltered' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAll'. Either include it or remove the dependency array.",["127"],"'MenuIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [getKeyWord]",{"range":"134","text":"135"},"Update the dependencies array to be: [lables, setPastes]",{"range":"136","text":"137"},"Update the dependencies array to be: [fetchAll, options]",{"range":"138","text":"139"},[3927,3929],"[getKeyWord]",[1239,1247],"[lables, setPastes]",[3624,3633],"[fetchAll, options]"]